name: Deploy ASP.NET Core app to Azure Web App

on:
  push:
    branches:
      - master

env:
  AZURE_WEBAPP_NAME: 'line-ready-api' # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.' # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '5.0.101' # set this to the dot net version to use
  RESOURCEGROUPNAME: 'line-ready-api-rg'
  LOCATION: 'East US'
  HOSTINGPLANNAME: 'line-ready-api-plan'
  APPINSIGHTLOCATION: 'East US'
  SKU: 'B1 Basic'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repo
      - uses: actions/checkout@master

      - name: Creating artifact directories
        run: |
          mkdir buildartifacts
          mkdir deploymenttemplates

      # Setup .NET Core SDK
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Run dotnet build and publish
      - name: dotnet build unit test and publish
        run: |
          cd Application
          dotnet restore
          dotnet build --configuration Release
          dotnet test line-ready-api.UnitTests/line-ready-api.UnitTests.csproj
          dotnet publish -c Release -o '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/build'

      - name: Archive Application
        uses: papeloto/action-zip@v1
        with:
          files: ./Application/build
          dest: ./buildartifacts/Application.zip

      - name: Upload Application to Build Artifact
        continue-on-error: false
        uses: actions/upload-artifact@v2
        with:
          name: buildartifacts
          path: buildartifacts

      - name: Archive ArmTemplates
        uses: papeloto/action-zip@v1
        with:
          files: ./ArmTemplates
          dest: ./deploymenttemplates/ArmTemplates.zip

      - name: Upload Arm templates to Artifact
        continue-on-error: false
        uses: actions/upload-artifact@v2
        with:
          name: deploymenttemplates
          path: deploymenttemplates

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2
        continue-on-error: false
        with:
          name: buildartifacts
          path: buildartifacts

      - name: unzipping build artifact
        uses: montudor/action-zip@v0.1.0
        with:
          args: unzip -qq ./buildartifacts/Application.zip -d ./Application

      - name: Download an Arm template
        uses: actions/download-artifact@v2
        continue-on-error: false
        with:
          name: deploymenttemplates
          path: deploymenttemplates

      - name: unzipping arm artifact
        uses: montudor/action-zip@v0.1.0
        with:
          args: unzip -qq ./deploymenttemplates/ArmTemplates.zip -d ./ArmTemplates

      - name: Login to Azure
        uses: azure/login@v1
        continue-on-error: false
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy ARM Template
        uses: azure/CLI@v1
        continue-on-error: false
        with:
          inlineScript: |
            az group create --name "${{ env.RESOURCEGROUPNAME }}" --location "${{ env.LOCATION }}"
            az deployment group create --resource-group "${{ env.RESOURCEGROUPNAME }}" --template-file ./ArmTemplates/windows-webapp-template.json --parameters webAppName="${{ env.AZURE_WEBAPP_NAME }}" hostingPlanName="${{ env.HOSTINGPLANNAME }}" appInsightsLocation="${{ env.APPINSIGHTLOCATION }}" sku="${{ env.SKU }}"

      - name: 'Deploy web app'
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/Application'

  FunctionalTests:
    name: Functional tests
    runs-on: windows-latest
    needs: deploy
    steps:
      - uses: actions/checkout@master

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: update web app url in Run Settings
        shell: powershell
        run: |
          cd Application\line-ready-api.FunctionalTests
          [xml]$runSetting = Get-Content functionalTests.runsettings
          $runSetting.RunSettings.TestRunParameters.ChildNodes.Item(0).value = 'https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/'
          $runSetting.Save("$(pwd)/functionalTests.runsettings")

      - name: Run tests
        continue-on-error: false
        run: |
          pushd .
          cd $env:temp
          $Path = $env:TEMP; $Installer = "chrome_installer.exe"; Invoke-WebRequest "https://dl.google.com/chrome/install/latest/chrome_installer.exe" -OutFile $Path$Installer; Start-Process -FilePath $Path$Installer -Args "/silent /install" -Verb RunAs -Wait; Remove-Item $Path$Installer
          Invoke-WebRequest https://chromedriver.storage.googleapis.com/83.0.4103.39/chromedriver_win32.zip -outFile chromedriver.zip
          Expand-Archive -Path chromedriver.zip
          Remove-Item chromedriver.zip
          popd
          cd Application\line-ready-api.FunctionalTests
          dotnet test line-ready-api.FunctionalTests.csproj -s functionalTests.runsettings
